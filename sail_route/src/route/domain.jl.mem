        - using PyCall
        - 
        - @pyimport importlib.machinery as machinery
        - loader = machinery.SourceFileLoader("pydomain",ENV["HOME"]*"/sail_route.jl/sail_route/src/route/pydomain.py")
        - pd = loader[:load_module]("pydomain")
        - 
        - """
        -     haversine(lon1, lat1, lon2, lat2)
        - 
        - Calculate the haversine distance and bearing. Distance is in nm.
        - """
        - function haversine(lon1::Float64, lat1::Float64, lon2::Float64, lat2::Float64)
        -     R = 6372.8  # Earth radius in kilometers
        - 
        -     dLat = deg2rad(lat2 - lat1)
        -     dLon = deg2rad(lon2 - lon1)
        -     lat1 = deg2rad(lat1)
        -     lat2 = deg2rad(lat2)
        -     lon1 = deg2rad(lon1)
        -     lon2 = deg2rad(lon2)
        0     a = sin(dLat/2)^2 + cos(lat1)*cos(lat2)*sin(dLon/2)^2
        0     c = 2*asin(sqrt(a))
        0     theta = atan(sin(dLon)*cos(lat2),
        -                  cos(lat1)*sin(lat2)-sin(lat1)*cos(lat2)*cos(dLon))
        -     theta = (rad2deg(theta) + 360) % 360
        0     return R*c*0.5399565, theta
        - end
        - 
        - """
        -     co_ordinates(start_long, finish_long, start_lat, finish_lat,
        -                  n_ranks, n_nodes, dist)
        - 
        - Return the co-ordinates of each point across the discretized domain.
        - """
        - function co_ordinates(start_long, finish_long, start_lat, finish_lat,
        -                       n_ranks::Int, n_nodes::Int, dist)
       96     x, y, land = pd[:return_co_ords](start_long, finish_long, start_lat,
        -                                      finish_lat, n_ranks, n_nodes,
        -                                      dist)
       32     return x, y, land
        - end
        - 
        - 
        - """Calculate the number of nodes for a specific distance in nm."""
        - function calc_nodes(lon1, lon2, lat1, lat2, req_d)
        0     d = haversine(lon1, lon2, lat1, lat2)[1]
        -     req_n = round(Int, d/req_d)
        -     req_n
        - end
        - 
        - 
        - """Calculate the minimum distance between two angles."""
        - function min_angle(a, b)
        0     abs(mod(a - b + 180.0, 360.0) - 180.0)
        - end
